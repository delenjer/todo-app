{"version":3,"sources":["components/Header.js","components/TodoList.js","components/Footer.js","App.js","index.js"],"names":["Header","props","handleAddNewTodo","newTodoValue","addTodoInputValue","className","onSubmit","type","placeholder","value","onChange","TodoList","todos","HandleCheckedItem","destroyItem","map","todo","key","id","checked","completed","htmlFor","title","onClick","Footer","clearCompletedItem","filtered","filterName","filter","length","href","App","state","generalCompleted","target","setState","e","preventDefault","newTodo","Date","trim","itemId","checkedAllItem","prevState","name","filteredCompleted","savedTodos","localStorage","getItem","savedFilter","JSON","parse","this","prevProps","setItem","stringify","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iUAGaA,EAAS,SAACC,GAAW,IACxBC,EAAsDD,EAAtDC,iBAAkBC,EAAoCF,EAApCE,aAAcC,EAAsBH,EAAtBG,kBAExC,OACE,4BAAQC,UAAU,UAChB,qCAEA,0BAAMC,SAAUJ,GACd,2BACEK,KAAK,OACLF,UAAU,WACVG,YAAY,yBACZC,MAAON,EACPO,SAAUN,OCbPO,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,kBAAmBC,EAA7B,EAA6BA,YAA7B,OACtB,wBAAIT,UAAU,aAEVO,EAAMG,KAAI,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,EAAKE,IACZ,yBAAKb,UAAU,QACb,2BACEa,GAAIF,EAAKE,GACTX,KAAK,WACLF,UAAU,SACVK,SAAU,kBAAMG,EAAkBG,EAAKE,KACvCC,QAASH,EAAKI,YAGhB,2BACEC,QAASL,EAAKE,GACdb,UAAWW,EAAKI,UAAY,iBAAmB,IAE9CJ,EAAKM,OAGR,4BACEf,KAAK,SACLF,UAAU,UACVkB,QAAS,kBAAMT,EAAYE,EAAKE,QAGpC,2BAAOX,KAAK,OAAOF,UAAU,eC3B1BmB,EAAS,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAOa,EAAV,EAAUA,mBAAoBC,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,WAAxC,OACpB,4BAAQtB,UAAU,UAChB,0BAAMA,UAAU,cACbO,EAAMgB,QAAO,SAAAZ,GAAI,OAAKA,EAAKI,aAAWS,OADzC,mBAOA,wBAAIxB,UAAU,WACZ,4BACE,uBACEyB,KAAK,KACLzB,UAA0B,QAAfsB,EAAuB,WAAa,GAC/CJ,QAAS,kBAAMG,EAAS,SAH1B,QASF,4BACE,uBACEI,KAAK,WACLzB,UAA0B,WAAfsB,EAA0B,WAAa,GAClDJ,QAAS,kBAAMG,EAAS,YAH1B,WASF,4BACE,uBACEI,KAAK,cACLzB,UAA0B,cAAfsB,EAA6B,WAAa,GACrDJ,QAAS,kBAAMG,EAAS,eAH1B,eAUJ,4BACEnB,KAAK,SACLF,UAAU,kBACVkB,QAASE,GAHX,qBC4HWM,E,4MAjKbC,MAAQ,CACNpB,MAAO,GACPT,aAAc,GACd8B,kBAAkB,EAClBN,WAAY,O,EA4BdvB,kBAAoB,YAAiB,IAC3BK,EAD0B,EAAbyB,OACbzB,MAER,EAAK0B,SAAU,CACbhC,aAAcM,K,EAIlBP,iBAAmB,SAACkC,GAClBA,EAAEC,iBAEF,EAAKF,UAAS,YAA8B,IAA3BvB,EAA0B,EAA1BA,MAAOT,EAAmB,EAAnBA,aAChBmC,EAAU,CACdpB,IAAK,IAAIqB,KACTjB,MAAOnB,EACPiB,WAAW,GAGb,MAAqB,KAAjBjB,GAAwBA,EAAaqC,OAIlC,CACL5B,MAAM,GAAD,mBAAMA,GAAN,CAAa0B,IAClBnC,aAAc,IALP,S,EAUbU,kBAAoB,SAAC4B,GACnB,EAAKN,UAAS,kBAAgB,CAC5BvB,MADY,EAAGA,MACFG,KAAI,SAAAC,GAAI,OACnBA,EAAKE,KAAOuB,EAAZ,2BACKzB,GADL,IAEEI,WAAYJ,EAAKI,YACdJ,U,EAKX0B,eAAiB,WACf,EAAKP,UAAS,SAAAQ,GAAS,MAAK,CAC1BV,kBAAmBU,EAAUV,iBAC7BrB,MAAO,YAAI+B,EAAU/B,OAAOG,KAAI,SAAAC,GAAI,kCAC/BA,GAD+B,IAElCI,WAAYuB,EAAUV,2B,EAK5BnB,YAAc,SAAC2B,GACb,EAAKN,UAAS,kBAAgB,CAC5BvB,MADY,EAAGA,MACFgB,QAAO,SAAAZ,GAAI,OAAIA,EAAKE,KAAOuB,U,EAI5ChB,mBAAqB,WACnB,EAAKU,UAAS,kBAAgB,CAC5BvB,MADY,EAAGA,MACFgB,QAAO,SAAAZ,GAAI,OAAKA,EAAKI,aAClCa,kBAAkB,O,EAItBP,SAAW,SAACkB,GACV,EAAKT,SAAS,CACZR,WAAYiB,K,EAIhBC,kBAAoB,WAAO,IAAD,EACM,EAAKb,MAA3BL,EADgB,EAChBA,WAAYf,EADI,EACJA,MAEpB,OAAQe,GACN,IAAK,SACH,OAAOf,EAAMgB,QAAO,SAAAZ,GAAI,OAAKA,EAAKI,aAEpC,IAAK,YACH,OAAOR,EAAMgB,QAAO,SAAAZ,GAAI,OAAIA,EAAKI,aAEnC,QACE,OAAOR,I,kEAxGX,IAAMkC,EAAaC,aAAaC,QAAQ,SAClCC,EAAcF,aAAaC,QAAQ,QAEnCpC,EAAQkC,EAAaI,KAAKC,MAAML,GAAcM,KAAKpB,MAAMpB,MACzDe,EAAasB,GAAeG,KAAKpB,MAAML,WAEzCf,GACFwC,KAAKjB,SAAS,CACZvB,QACAe,iB,yCAKa0B,EAAWV,GACxBA,EAAU/B,QAAUwC,KAAKpB,MAAMpB,OACjCmC,aAAaO,QAAQ,QAASJ,KAAKK,UAAUH,KAAKpB,MAAMpB,QAGtD+B,EAAUhB,aAAeyB,KAAKpB,MAAML,YACtCoB,aAAaO,QAAQ,SAAUF,KAAKpB,MAAML,c,+BAwFpC,IAAD,EACqCyB,KAAKpB,MAAzC7B,EADD,EACCA,aAAcwB,EADf,EACeA,WAAYf,EAD3B,EAC2BA,MAElC,OACE,6BAASP,UAAU,WACjB,kBAAC,EAAD,CACEF,aAAcA,EACdD,iBAAkBkD,KAAKlD,iBACvBE,kBAAmBgD,KAAKhD,oBAG1B,6BAASC,UAAU,QAEfO,EAAMiB,OAAS,GACb,oCACE,2BACEtB,KAAK,WACLW,GAAG,aACHb,UAAU,aACVK,SAAU0C,KAAKV,iBAGjB,2BAAOrB,QAAQ,cAAf,yBAKN,kBAAC,EAAD,CACET,MAAOwC,KAAKP,oBACZhC,kBAAmBuC,KAAKvC,kBACxBC,YAAasC,KAAKtC,eAItB,kBAAC,EAAD,CACEF,MAAOA,EACPe,WAAYA,EACZF,mBAAoB2B,KAAK3B,mBACzBC,SAAU0B,KAAK1B,gB,GA3JP8B,IAAMC,WCGxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0db047e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Header = (props) => {\n  const { handleAddNewTodo, newTodoValue, addTodoInputValue } = props;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleAddNewTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodoValue}\n          onChange={addTodoInputValue}\n        />\n      </form>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  handleAddNewTodo: PropTypes.func.isRequired,\n  addTodoInputValue: PropTypes.func.isRequired,\n  newTodoValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({ todos, HandleCheckedItem, destroyItem }) => (\n  <ul className=\"todo-list\">\n    {\n      todos.map(todo => (\n        <li key={todo.id}>\n          <div className=\"view\">\n            <input\n              id={todo.id}\n              type=\"checkbox\"\n              className=\"toggle\"\n              onChange={() => HandleCheckedItem(todo.id)}\n              checked={todo.completed}\n            />\n\n            <label\n              htmlFor={todo.id}\n              className={todo.completed ? 'completed-item' : ''}\n            >\n              {todo.title}\n            </label>\n\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => destroyItem(todo.id)}\n            />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  HandleCheckedItem: PropTypes.func.isRequired,\n  destroyItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Footer = ({ todos, clearCompletedItem, filtered, filterName }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.completed).length}\n      &#160;\n\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={filterName === 'all' ? 'selected' : ''}\n          onClick={() => filtered('all')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={filterName === 'active' ? 'selected' : ''}\n          onClick={() => filtered('active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={filterName === 'completed' ? 'selected' : ''}\n          onClick={() => filtered('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={clearCompletedItem}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clearCompletedItem: PropTypes.func.isRequired,\n  filtered: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    newTodoValue: '',\n    generalCompleted: false,\n    filterName: 'all',\n  };\n\n  componentDidMount() {\n    const savedTodos = localStorage.getItem('todos');\n    const savedFilter = localStorage.getItem('name');\n\n    const todos = savedTodos ? JSON.parse(savedTodos) : this.state.todos;\n    const filterName = savedFilter || this.state.filterName;\n\n    if (todos) {\n      this.setState({\n        todos,\n        filterName,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n\n    if (prevState.filterName !== this.state.filterName) {\n      localStorage.setItem('filter', this.state.filterName);\n    }\n  }\n\n  addTodoInputValue = ({ target }) => {\n    const { value } = target;\n\n    this.setState(({\n      newTodoValue: value,\n    }));\n  };\n\n  handleAddNewTodo = (e) => {\n    e.preventDefault();\n\n    this.setState(({ todos, newTodoValue }) => {\n      const newTodo = {\n        id: +new Date(),\n        title: newTodoValue,\n        completed: false,\n      };\n\n      if (newTodoValue === '' || !newTodoValue.trim()) {\n        return null;\n      }\n\n      return {\n        todos: [...todos, newTodo],\n        newTodoValue: '',\n      };\n    });\n  };\n\n  HandleCheckedItem = (itemId) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => (\n        todo.id === itemId ? ({\n          ...todo,\n          completed: !todo.completed,\n        }) : todo\n      )),\n    }));\n  };\n\n  checkedAllItem = () => {\n    this.setState(prevState => ({\n      generalCompleted: !prevState.generalCompleted,\n      todos: [...prevState.todos].map(todo => ({\n        ...todo,\n        completed: !prevState.generalCompleted,\n      })),\n    }));\n  };\n\n  destroyItem = (itemId) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => todo.id !== itemId),\n    }));\n  };\n\n  clearCompletedItem = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.completed),\n      generalCompleted: false,\n    }));\n  };\n\n  filtered = (name) => {\n    this.setState({\n      filterName: name,\n    });\n  };\n\n  filteredCompleted = () => {\n    const { filterName, todos } = this.state;\n\n    switch (filterName) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  render() {\n    const { newTodoValue, filterName, todos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          newTodoValue={newTodoValue}\n          handleAddNewTodo={this.handleAddNewTodo}\n          addTodoInputValue={this.addTodoInputValue}\n        />\n\n        <section className=\"main\">\n          {\n            todos.length > 0 && (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  onChange={this.checkedAllItem}\n                />\n\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              </>\n            )\n          }\n\n          <TodoList\n            todos={this.filteredCompleted()}\n            HandleCheckedItem={this.HandleCheckedItem}\n            destroyItem={this.destroyItem}\n          />\n        </section>\n\n        <Footer\n          todos={todos}\n          filterName={filterName}\n          clearCompletedItem={this.clearCompletedItem}\n          filtered={this.filtered}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}